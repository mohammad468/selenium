{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2022-08-13T08:57:28.460Z",
    "end": "2022-08-13T08:57:35.591Z",
    "duration": 7131,
    "testsRegistered": 3,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "bf4a7aaf-0025-4bb9-a28b-56b57ccbdb48",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "203d1f2a-fcd4-4959-97c5-6659edfffedd",
          "title": "render todo",
          "fullFile": "C:\\Users\\BCC\\Desktop\\selenium\\test\\firstTest.js",
          "file": "\\test\\firstTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "testing add a todo",
              "fullTitle": "render todo testing add a todo",
              "timedOut": null,
              "duration": 3306,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// launch the browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n//add a todo\nawait driver\n  .findElement(By.id(\"sampletodotext\"))\n  .sendKeys(\"Learn Selenium\", Key.RETURN);\n//assert\nlet todoText = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText()\n  .then(function (value) {\n    return value;\n  });\n// assert using node assertion\n// assert.strictEqual(todoText, \"Learn Selenium\");\n//assert using chai should\ntodoText.should.equal(\"Learn Selenium\");\n// close the browser\nawait driver.quit();",
              "err": {},
              "uuid": "e4e2f800-50a6-46cb-b454-3ba0564b7ab9",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4e2f800-50a6-46cb-b454-3ba0564b7ab9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3306,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "5a17d151-d467-43eb-9104-1034df523522",
          "title": "render another todo",
          "fullFile": "C:\\Users\\BCC\\Desktop\\selenium\\test\\secondTest.js",
          "file": "\\test\\secondTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "testing add an another todo",
              "fullTitle": "render another todo testing add an another todo",
              "timedOut": null,
              "duration": 3695,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// launch the browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n//add a todo\nawait driver\n  .findElement(By.id(\"sampletodotext\"))\n  .sendKeys(\"Learn JavaScript\", Key.RETURN);\n//assert\nlet todoText = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText()\n  .then(function (value) {\n    return value;\n  });\n// assert using node assertion\n// assert.strictEqual(todoText, \"Learn Selenium\");\n//assert using chai should\ntodoText.should.equal(\"Learn JavaScript\");\n// close the browser\nawait driver.quit();",
              "err": {},
              "uuid": "0ce897d7-7aec-4049-876d-c6ea17ee4ef7",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "testing add an another todo",
              "fullTitle": "render another todo testing add an another todo",
              "timedOut": null,
              "duration": 3045,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// launch the browser\nlet driver = await new Builder().forBrowser(\"chrome\").build();\nawait driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n//add a todo\nawait driver\n  .findElement(By.id(\"sampletodotext\"))\n  .sendKeys(\"Learn JavaScript\", Key.RETURN);\n//assert\nlet todoText = await driver\n  .findElement(By.xpath(\"//li[last()]\"))\n  .getText()\n  .then(function (value) {\n    return value;\n  });\n// assert using node assertion\n// assert.strictEqual(todoText, \"Learn Selenium\");\n//assert using chai should\ntodoText.should.equal(\"Learn JS\");\n// close the browser\nawait driver.quit();",
              "err": {
                "message": "AssertionError: expected 'Learn JavaScript' to equal 'Learn JS'",
                "estack": "AssertionError: expected 'Learn JavaScript' to equal 'Learn JS'\n    at Context.<anonymous> (test\\secondTest.js:54:21)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- Learn JavaScript\n+ Learn JS\n"
              },
              "uuid": "9006be03-3876-412f-960d-8bae8a9550fa",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0ce897d7-7aec-4049-876d-c6ea17ee4ef7"
          ],
          "failures": [
            "9006be03-3876-412f-960d-8bae8a9550fa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 6740,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "/Users/BCC/Desktop/selenium/testReports"
      },
      "version": "6.2.0"
    }
  }
}